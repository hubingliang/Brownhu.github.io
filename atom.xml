<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hubingliang.github.io</id>
    <title>Gridea</title>
    <updated>2019-06-03T08:52:29.836Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hubingliang.github.io"/>
    <link rel="self" href="https://hubingliang.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://hubingliang.github.io/images/avatar.png</logo>
    <icon>https://hubingliang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://hubingliang.github.io/post/hello-gridea</id>
        <link href="https://hubingliang.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[rem方案完美解决自适应]]></title>
        <id>https://hubingliang.github.io/post/rem</id>
        <link href="https://hubingliang.github.io/post/rem">
        </link>
        <updated>2017-10-07T08:31:46.000Z</updated>
        <content type="html"><![CDATA[<p>随着移动互联网的兴起，Web app的开发也越来越重要，与此同时页面布局也成了一个令人头痛的问题。rem的出现貌似可以完美解决移动端适配的问题。</p>
<h2 id="什么是rem">什么是rem</h2>
<p>说到rem自然就会想到em，我们知道em是相对于父元素的字体大小的单位，那么rem则是相对于根元素也就是<code>&lt;html&gt;</code>元素的字体大小的单位。</p>
<h2 id="如何用rem解决移动端适配">如何用rem解决移动端适配</h2>
<p><img src="http://upload-images.jianshu.io/upload_images/4337988-bc2b886890d0962a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>通过这张图我们就可以观察到，div的宽度和高度是根据根元素<code>&lt;html&gt;</code>来决定的，根元素的字体大小为100px，然后给div的宽度和高度设置为2rem、1rem，最后生成的div的宽度为200px、高度为100px。
也就是说我们可以通过改变根元素的字体大小，进而对页面进行等比例缩放,从而实现自适应。
那么如何根据设备的不同来改变根元素的字体大小呢？
我们在<code>&lt;head&gt;</code>标签里面引入这样一段js代码：</p>
<pre><code class="language-js">var width = document.documentElement.clientWidth
var css = `
    html{
    font-size: ${width/10}px;
    }
    `
document.write(`&lt;style&gt;${css}&lt;/style&gt;`)
</code></pre>
<p>很简单，只做了一件事：就是把根元素的字体大小改成当前设备的宽度，然后我们在开发的时候全部根据设计稿的宽度来设置每一个元素的大小。
如果设计稿的宽度是按照iphone5的宽度来设计的，那么开发的时候也要根据iphone的宽度也就是320px来设置。</p>
<blockquote>
<p>不过最后不要忘了在body元素中重新设置正常的font-size，不然整个页面会垮掉！！</p>
</blockquote>
<p>例子：如果这是我们要做的设计稿</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4337988-591bb00dccbcc0f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>一个歌单的封面大小为103px，那么我们在写css的时候就要写（103/320）px，这时候你肯定会觉得很麻烦，难道我每次都要这样计算吗？
不用，每次只要写出实际的px大小就好，px和rem的转换可以借助网站工具：
<a href="http://520ued.com/tools/rem">px =&gt; rem</a>
<a href="http://alurk.com/">功能更加强大的rem转换</a></p>
<h2 id="参考文献">参考文献</h2>
<ul>
<li><a href="http://caibaojian.com/web-app-rem.html">rem是如何实现自适应布局的？</a></li>
<li><a href="http://caibaojian.com/rem-responsive-2.html">rem自适应布局的回顾总结</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2周时间掌握47个CSS技巧]]></title>
        <id>https://hubingliang.github.io/post/47css-trick</id>
        <link href="https://hubingliang.github.io/post/47css-trick">
        </link>
        <updated>2017-09-23T09:08:53.000Z</updated>
        <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4337988-5c96398f52336f77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>两周前入手了<a href="https://book.douban.com/subject/26745943/">《CSS揭秘》</a></p>
<p>两周时间收益匪浅，学习了很多CSS技巧，感觉打开了新世界的大门，在看到一半的时候感觉还是自己实现一边印象比较深刻。于是自己把47个CSS技巧全部实现了一遍：<a href="https://github.com/hubingliang/CSS-secrets">Github</a> 具体实现方法可以在控制台查看CSS，欢迎 star。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4337988-e5572657637e9e85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">
其中有多个解决方法的情况，使用了当下最优解来实现，之后发现了几个问题：有几个CSS技巧并没有成功--24、25、26</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4337988-0f3b302a547a08f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="">
在书中给的参考网站也同样失效了.....如果有大佬知道如何实现欢迎提pull request</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS清除浮动的三种方法]]></title>
        <id>https://hubingliang.github.io/post/clear-float</id>
        <link href="https://hubingliang.github.io/post/clear-float">
        </link>
        <updated>2017-05-22T11:48:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="先上一个简单的例子">先上一个简单的例子</h2>
<p><img src="http://upload-images.jianshu.io/upload_images/4337988-6a161d22dcba3ef4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="简单的例子"></p>
<p><strong>如图所示,图片被添加了float:left属性,实现了文字环绕效果.但是再给div加了border之后,我们发现图片并没有被包起来,也就是图片浮上来了一层,那么怎么解决这种情况,包住图片呢?</strong></p>
<p>下面将介绍三种清除浮动的方法：</p>
<p><a href="http://js.jirengu.com/rino/4/edit?html,output">跟着试一试?</a></p>
<h2 id="给空div加clear">给空div加clear</h2>
<p>在div元素的最后,加一个空div,并且加上clear属性,和绿色border(border大法好!).
<code>&lt;div style=&quot;clear: left; border: 4px solid green&quot;&gt;&lt;/div&gt;</code></p>
<p><img src="http://upload-images.jianshu.io/upload_images/4337988-f792d7ba9501d188.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="空div"></p>
<p>我们发现绿色的空div把红色div的下边压到了图片以下,达到了我们清除浮动的效果.
clear: left在这里的意思是:有此样式的元素盒的左边不可以有浮动的元素.</p>
<p>[clear元素不明白点这里](http://www.ayqy.net/doc/css2-1/visuren.html## propdef-clear)</p>
<h2 id="使用伪类">使用伪类</h2>
<p>和第一种方法的原理是一样的,只不过这次不需要每次清除浮动的时候都写一遍代码.
用伪类声明一个css属性,需要清除浮动的元素,加上就可以实现了,绿色环保.
在css中写入：</p>
<pre><code class="language-css">  .clearfix::after{
    content:'';
    border: 4px solid green;
    clear: both;
    display: block;
  }
</code></pre>
<p>然后在最外层div上加上clearfix类就可以实现了</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4337988-5cf4dd72227ec268.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="伪类实现"></p>
<h2 id="overflow-hidden清除浮动">overflow: hidden清除浮动</h2>
<p>给父元素加上overflow: hidden属性.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4337988-94db81bb9b3333ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="overflow: hidden"></p>
<p>overflow: hidden 的意思是超出的部分要裁切隐藏掉,那么为什么会有清除浮动的效果呢?因为父元素没有声明高度,所以要把父元素中所有的元素高度计算出来,才能根据所计算的高度,超出高度的将被裁掉.
我们试试给父元素加一个100px的高度:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4337988-978a6893d3ea0615.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片就被剪裁了"></p>
<p><strong>所以此方法是有适用范围的,父元素的高度必须是auto,否则将不生效!</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ 搞懂Z-index的所有细节]]></title>
        <id>https://hubingliang.github.io/post/z-index</id>
        <link href="https://hubingliang.github.io/post/z-index">
        </link>
        <updated>2017-04-29T12:31:12.000Z</updated>
        <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4337988-72fc3279283f3d96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="用Z-index来改变堆叠顺序"></p>
<p><a href="http://www.cssmojo.com/extras/everything_you_always_wanted_to_know_about_z-index_but_were_afraid_to_ask/">Z-index测试网站</a></p>
<h2 id="z-index-在什么情况下才生效">z-index 在什么情况下才生效？</h2>
<p>Z-index的运用是需要条件的,与其相关的属性就是position属性。我们以三个div来举例子。</p>
<ul>
<li>position: static;</li>
</ul>
<p>当三个div的position都为static时,我们把div(A)的Z-index设置为15, 把div(B)的Z-index设置为10,把div(C)的Z-index设置为5。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4337988-dc45d7a26386344b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>发现div(B)依然把div(A)的一部分挡住了,所以当position为static时,Z-index起不到任何改变堆叠的作用。</strong></p>
<ul>
<li>position: relative/absolute/fixed;</li>
</ul>
<p>当三个div的position都为relative/absolute/fixed时,发现Z-index生效。
<img src="http://upload-images.jianshu.io/upload_images/4337988-b3b78915180bd5e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>总结: 只有position的值为relative/absolute/fixed中的一个,Z-index才会生效。</strong></p>
<h2 id="z-index值越大元素越靠前对吗">z-index值越大元素越靠前，对吗？</h2>
<p>我们现在div(A)和div(B)中再分别创建一个小的div(c)和div(d)</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4337988-8330fa3e640fe19e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这一张图就是一个特例"></p>
<p>我们观察到,div(a)的Z-index为20 可是为什么还会被Z-index仅仅为10的div(B)遮挡住呢?
难道是因为Z-index继承给他的子元素了吗?不Z-index可是不继承给它的子元素的。
我们试试把biv(A)的Z-index设置成auto</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4337988-e92ccbadb3ad1561.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>div(a)成功的遮挡住了Z-index比他小的元素。</p>
<p>再试试只把div(a)设置为auto</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4337988-e4724db7e354c034.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h2 id="总结">总结:</h2>
<ol>
<li>当Z-index的值设置为auto时,不建立新的堆叠上下文,当前堆叠上下文中生成的div的堆叠级别与其父项的框相同。</li>
<li>当Z-index的值设置为一个整数时,该整数是当前堆叠上下文中生成的div的堆栈级别。该框还建立了其堆栈级别的本地堆叠上下文。这意味着后代的z-index不与此元素之外的元素的z-index进行比较。</li>
</ol>
<p>ps: 通俗讲就是,当一个div的Z-index为整数时,它的子元素和外界元素进行比较时,采用父元素的Z-index进行比较, 和兄弟元素比较采用自身的Z-index。当一个div的Z-index为auto时,如果它和它的兄弟进行比较,采用它父元素的Z-index。</p>
<h2 id="z-index-不设置和设置为0有什么区别">z-index 不设置和设置为0有什么区别?</h2>
<p>如果不设置Z-index那么默认值为auto,则不建立层叠上下文。设置为0则会脱离文档流,建立层叠上下文。
<img src="http://upload-images.jianshu.io/upload_images/4337988-da32ea3f63d9b3c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文档流Z轴"></p>
]]></content>
    </entry>
</feed>